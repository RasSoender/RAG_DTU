{
    "course title": "02249 Beregningsmæssigt hårde problemer",
    "Engelsk titel": "Computationally Hard Problems",
    "Undervisningssprog": "Engelsk",
    "Point( ECTS )": "7,5",
    "Kursustype": "Kandidat\nGenerel retningskompetence (MSc), Computer Science and Engineering\nRetningsspecifikt kursus (MSc), Computer Science and Engineering\nRetningsspecifikt kursus (MSc), Mathematical Modelling and Computation\nTeknologisk specialisering (MSc), Computer Science and Engineering\nTeknologisk specialisering (MSc), Mathematical Modelling and Computation",
    "Skemaplacering": "E3A (tirs 8-12)",
    "Undervisningens placering": "Campus Lyngby",
    "Undervisningsform": "Forelæsninger og opgaver (hvoraf nogle er obligatoriske).",
    "Kursets varighed": "13-uger",
    "Eksamensplacering": "E3A",
    "Evalueringsform": "Skriftlig eksamen og bedømmelse af opgave(r)\nSkriftlig eksamen og bedømmelse af opgave(r). Gruppeprojekter skal individualiseres. Karakteren fremkommer ved en helhedsvurdering.",
    "Eksamensvarighed": "Skriftlig eksamen: 4 timer",
    "Hjælpemidler": "Alle hjælpemidler - uden adgang til internettet",
    "Bedømmelsesform": "7-trins skala , ekstern censur",
    "Faglige forudsætninger": "02110. 02141. 02402/02403/02405 , Kendskab af algoritmer og grundlæggende emner fra formelle sprog og statistik/sandsynlighedsregning.",
    "Kursusansvarlig": "Carsten Witt , Tlf. (+45) 4525 3722 , cawi@dtu.dk",
    "Institut": "01 Institut for Matematik og Computer Science",
    "Tilmelding": "I studieplanlæggeren",
    "Overordnede kursusmål": "Overordnede kursusmål\nFor mange problemer i den virkelige verden kender man ingen metoder til effektivt at finde den optimale løsning. Vi kalder denne type problemer for beregningsmæssigt hårde problemer. For denne type problemer er det kun muligt at finde approksimative løsninger indenfor rimelig tid. Kursets formål er at sætte de studerende i stand til at identificere et problem som beregningsmæssigt hårdt og udstyre dem med algoritmiske metoder til at finde approksimative løsninger.",
    "Læringsmål": "En studerende, der fuldt ud har opfyldt kursets mål, vil kunne:\ndesigne en inputbeskrivelse for et givet problem\ndefinere de forskellige niveauer af hårdhed af problemer\ndefinere hvornår et problem er hårdt\nidentificere den tilgrundliggende abstrakte struktur af et virkeligt problem\nafgøre om et givet problem er beregningsmæssigt hårdt\nanalysere et givet problem med hensyn til dets kompleksitet\nanalysere randomiserede algoritmer med hensyn til brug af ressourcer\nanalysere randomiserede algoritmer med hensyn til kvaliteten af den løsning de frembringer\ngenkende muligheden for anvendelsen af randomiserede algoritmer til at løse et givet hårdt problem\ndesigne randomiserede algoritmer for specifikke problemer\nsammenligne og vurdere forskellige løsningsmetoder for et givet problem og vælge den mest lovende",
    "Kursusindhold": "Der findes mange vigtige problemer indenfor daalogi og andre områder, som kan løses optimalt, men hvor den tid det kræver er så lang, at det gør det praktisk umuligt. Eksempler på sådanne problemer er: optimal tildeling af opgaver til processorer, finde den optimale rute for en varebil, pakke en kuffert optimalt, optimere læsset af et rumfartøj eller at finde den optimale sammensætning af et aktiedepot.\n\nI kurset vil vi først præcisere hvad vi mener med \"beregningsmæssigt hårde\" problemer. Derefter vil der blive givet eksempler på denne type problemer og præsenteret metoder til at bevise at et givet problem er hårdt. For at kunne analysere et problem fra den virkelige verden er det nødvendigt først at identificere den tilgrundliggende matematiske struktur af problemet. Derefter kan det konverteres til en abstrakt matematisk model som det er muligt at analysere.\n\nVi vil derefter betragte randomiserede algoritmer og vise hvordan disse kan bruges til at give approksimative løsninger til hårde problemer. Disse algoritmer er hurtige algoritmer der \"slår plat eller krone\" undervejs, dvs. bruger en tilfældighedsgenerator. Derfor kan man få forskellige løsninger når man kører en sådan algoritme på det samme input gentagne gange. Vi vil vise, at der er hårde problemer, som kan løses og \"næsten optimalt\" med randomiserede algoritmer. Dvs. at algoritmen med stor sandsynlighed finder en \"god\" løsning.",
    "Litteraturhenvisninger": "Forelæsningsnoter vil være tilgængelige på DTU Learn.",
    "Sidst opdateret": "02. maj, 2024"
}