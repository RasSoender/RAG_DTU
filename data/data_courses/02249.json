{
    "course title": "02249 Computationally Hard Problems",
    "Danish title": "Beregningsmæssigt hårde problemer",
    "Language of instruction": "English",
    "Point( ECTS )": "7,5",
    "Course type": "MSc\nGeneral competence course (MSc), Computer Science and Engineering\nProgramme specific course (MSc), Computer Science and Engineering\nProgramme specific course (MSc), Mathematical Modelling and Computation\nTechnological specialization course (MSc), Computer Science and Engineering\nTechnological specialization course (MSc), Mathematical Modelling and Computation",
    "Schedule": "Autumn E3A (Tues 8-12)",
    "Location": "Campus Lyngby",
    "Scope and form": "Lectures and exercises, some of which are mandatory.",
    "Duration of Course": "13 weeks",
    "Date of examination": "E3A",
    "Type of assessment": "Written examination and exercises\nWritten examination and assessment of exercise(s). Group projects require individualization. The mark is given by an overall assessment.",
    "Exam duration": "Written exam: 4 hours",
    "Aid": "All Aid - no access to the internet",
    "Evaluation": "7 step scale , external examiner",
    "Academic prerequisites": "02110. 02141. 02402/02403/02405 , Knowledge of algorithms and basics of formal languages and statistics/probability theory.",
    "Responsible": "Carsten Witt , Ph. (+45) 4525 3722 , cawi@dtu.dk",
    "Department": "01 Department of Applied Mathematics and Computer Science",
    "Registration Sign up": "At the Studyplanner",
    "General course objectives": "General course objectives\nFor many real world problems, an optimal solution cannot be found efficiently. Such problems are called computationally hard. For such problems only approximate solutions can be found in reasonable time. The aim is to enable the students to identify a problem as being not efficiently solvable and to supply them with algorithmic schemes for finding approximate solutions.",
    "Learning objectives": "A student who has met the objectives of the course will be able to:\nto design an input representation for a given problem\ndefine the various levels of hardness of problems\ndefine when a problem is hard\nidentify the abstract structure behind a real world problems\ndetermine whether a given problem is computationally hard\nanalyse a given problem with respect to its complexity\nanalyse randomized algorithms with respect to the use of resources\nanalyse randomized algorithms with respect to quality of the solution they provide\nrecognize the potential for a randomized solution in a given hard problem\ndesign randomized algorithms for specific problems\nevaluate and assess different solution methods and select the most promising one",
    "Content": "There are many important problems in Computer Sciences and other areas for which optimal solutions can be found but the time to do so is so long that it is not practical. Examples of such problems are optimal assignment of tasks to processors, finding an optimal tour for the local postman, optimal packing of a suitcase, optimizing the payload for a space mission or selecting a profitable stock portfolio.\n\nIn the course we will first specify what we mean by a \"computationally hard'' problem. Then some examples of such that problems are presented and methods are described to identify a problem as being hard. In order to become accessible to an analysis real world problems have to be converted into abstract mathematical models which capture the essence of the original problem.\n\nWe shall then look at problems where randomization helps in solving them. This means that there are fast algorithms for solving the problem that use \"coin flips'', i.e. a random number generator. Hence repeatedly running such an algorithm on the same input might lead to different solutions. We shall consider problems where a \"good'' solution will be found with high probability by randomized algorithms.",
    "Course literature": "Lecture notes will be available on DTU Learn.",
    "Last updated": "02. maj, 2024"
}