{
    "course title": "02245 Program Verification",
    "Danish title": "Programverifikation",
    "Language of instruction": "English",
    "Point( ECTS )": "7,5",
    "Course type": "MSc\nProgramme specific course (MSc), Computer Science and Engineering\nTechnological specialization course (MSc), Computer Science and Engineering",
    "Schedule": "Autumn E1B (Thurs 13-17)",
    "Location": "Online",
    "Scope and form": "Lectures, exercises, and project work.",
    "Duration of Course": "13 weeks",
    "Date of examination": "E1B, Depending on the number of students it may be necessary also to decide on other days.",
    "Type of assessment": "Oral examination and reports\nOne or two written reports are the basis for an oral exam.",
    "Aid": "All Aids - with access to the internet",
    "Evaluation": "7 step scale , external examiner",
    "Academic prerequisites": "02141 , Basic familiarity with program semantics and predicate logic is expected; the necessary background can be obtained in the course 02141. Students must be fluent in at least one object-oriented or functional programming language. Courses involving mathematical logic, for example 02156, are an advantage.",
    "Responsible": "Christoph Matheja , chmat@dtu.dk",
    "Course co-responsible": "Alberto Lluch Lafuente , Lyngby Campus, Building 321, Ph. (+45) 4525 3736 , albl@dtu.dk",
    "Department": "01 Department of Applied Mathematics and Computer Science",
    "Home page": "http://courses.compute.dtu.dk/02245/",
    "Registration Sign up": "At the Studyplanner",
    "General course objectives": "General course objectives\nThis course offers a hands-on introduction to the usage, construction, and theory of automated deductive program verifiers. Students should acquire the skills to apply and extend tool-supported methodologies for developing proven-correct software.",
    "Learning objectives": "A student who has met the objectives of the course will be able to:\nspecify functional correctness properties of imperative programs;\nuse automated verification tools to develop formally verified software;\njustify why a program meets its specification based on sound reasoning principles;\nexplain the technology stack involved in building automated verification tools;\ncompare deductive program verification to other methods aiming at increasing confidence in software correctness;\nencode verification-related decision problems to SMT (satisfiability modulo theories);\nidentify potential bottlenecks in existing SMT encodings;\nconstruct sound methodologies for program verification problems, automate these methodologies via encodings to SMT, and justify the involved design decisions;\nachieve the above goals in a group effort while at the same time maintaining individual accountability; and\ncommunicate solutions to problems in a clear and precise manner.",
    "Content": "The course covers reasoning principles, technologies, and design decisions underlying automated deductive verification tools. In particular, it introduces\n(1) program logics for writing formal correctness proofs (for example weakest preconditions and separation logic);\n(2) SMT solvers (for example Z3) for automating reasoning about logical formulas;\n(3) intermediate verification languages (for example Viper) for encoding verification methodologies; and\n(4) source code verifiers for handling feature-rich programming languages.\nThe course will intermix technical content with hands-on experience.",
    "Course literature": "Selected book chapters and research papers in addition to slides and lecture notes; the relevant material will be made available online.",
    "Last updated": "02. maj, 2024"
}