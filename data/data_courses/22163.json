{
    "course title": "22163 Unix & Python Programming for Bioinformaticians, MSc",
    "Danish title": "Unix & Python Programming for bioinformatikere, MSc",
    "Language of instruction": "English",
    "Point( ECTS )": "10",
    "Course type": "MSc\nOffered as a single course\nProgramme specific course (MSc), Bioinformatics\nProgramme specific course (MSc), Quantitative Biology and Disease Modelling\nTechnological specialization course (MSc), Quantitative Biology and Disease Modelling",
    "Schedule": "Spring F2 (Mon 13-17, Thurs 8-12)",
    "Location": "Campus Lyngby",
    "Scope and form": "Lectures and computer exercises",
    "Duration of Course": "13 weeks",
    "Date of examination": "F2A",
    "Type of assessment": "Written examination and reports\nMandatory exercises - at least 10 sets out of 12 must be handed in on time to take the exam (peer-evaluation included). The final evaluation is based on an overall assessment of both written exam (50%) and group project with individualization (50%). Both part exams must be passed to pass the course.",
    "Exam duration": "Written exam: 4 hours",
    "Aid": "All Aid - no access to the internet :\nThere is no internet access during the exam. Students must bring their own laptop.",
    "Evaluation": "pass / not pass , internal examiner",
    "Not applicable together with": "22113",
    "Academic prerequisites": "22101/22161 , Practical experience in Python programming at the level of course 22101/22161. Contact the course responsible in case of doubt.",
    "Responsible": "Peter Wad Sackett , Lyngby Campus, Building 204, Ph. (+45) 4525 2097 , pwsa@dtu.dk",
    "Department": "22 Department of Health Technology",
    "Home page": "https://teaching.healthtech.dtu.dk/22113/",
    "Registration Sign up": "At the Studyplanner",
    "General course objectives": "General course objectives\nThe student should be able to solve bioinformatic problems in a structured manner using Python in a Unix environment, for example during project work. It is an important goal to teach the student how to think when programming.",
    "Learning objectives": "A student who has met the objectives of the course will be able to:\nuse the command line of Unix with 10-15 common Unix commands, inclusive file system navigation, pipelines, process and file system control.\ndemonstrate and explain the python syntax, object mode, data structures, classes and 65-70 Python methods/functions.\nexercise pattern recognition in (bioinformatic) data files in order to extract information.\napply methods/programming techniques demonstrated in the course to similar problems.\nanalyze a (programming) problem and ascertain its components, and create an efficient solution by applying the right components in the right order.\nanalyze a program and, based on its behavior, locate and eradicate errors.\nevaluate the quality of the code, based on criteria shown in the course, and ensuring the code meets quality standards by employing the unit test technique.\nwrite clear, precise and well documented code, which is suitable for greater collaborative efforts.\nevaluate the performance and efficiency of code with respect to speed and memory consumption using Big O notation.\nutilize code libraries, both scientific and other, for fast and good solution of programming tasks.",
    "Content": "This course provides an introduction to Unix, which is widely used in bioinformatics. The students learn basic commands, file manipulation, input / output redirection, file system structure and process manipulation. The course builds on the existing knowledge of Python, and de studerende learn about regular expressions, advanced data structures, functions, Python's object model, classes, unit tests, and scientific libraries. This is done under an umbrella of exercises based on bioinformatics and data analysis problems.\nThe exercises must be peer-evaluated and integrated with the lectures. Students in groups of two will get a minor programming project during the course, possibly a project of their own design. Individual contributions to the project must be stated to facilitate individual assessment. A student will also peer-evaluate another group's project.",
    "Remarks": "Repeaters can reuse previously accepted exercises and project.",
    "Last updated": "02. maj, 2024"
}