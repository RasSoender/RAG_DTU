{
    "course title": "02196 Quantum Compilers",
    "Danish title": "Kvante kompilatorer",
    "Language of instruction": "English",
    "Point( ECTS )": "5",
    "Course type": "MSc",
    "Schedule": "Spring F5B (Wed 13-17)",
    "Location": "Campus Lyngby",
    "Duration of Course": "13 weeks",
    "Date of examination": "F5B",
    "Type of assessment": "Written examination",
    "Exam duration": "Written exam: 4 hours",
    "Aid": "Written works of reference are permitted :\nPocket calculators are not allowed.",
    "Evaluation": "7 step scale , internal examiner",
    "Responsible": "Sven Karlsson , Ph. (+45) 4525 3754 , svea@dtu.dk",
    "Department": "01 Department of Applied Mathematics and Computer Science",
    "External Institution": "DIKU, University of Copenhagen",
    "Registration Sign up": "At the Studyplanner",
    "Green challenge participation": "Please contact the teacher for information on whether this course gives the student the opportunity to prepare a project that may participate in DTU´s Study Conference on sustainability, climate technology, and the environment (GRØN DYST). More infor http://www.groendyst.dtu.dk/english",
    "General course objectives": "General course objectives\nClassic computers use compilers to translate high-level programming languages into specific operations of the hardware architecture of the computer. This decoupling of the programming language from the underlying hardware architecture has allowed us to move away from low-level assembly programming and develop complex programs that work across different computer architectures, effectively enabling the digital transformation.\n\nAs quantum computers are reaching feasibility, quantum compilers will be needed to raise the abstraction level of quantum programming. While impressive accomplishments are observed in the physical realization of quantum computers, the development of quantum compilers is still lacking behind. Today, quantum programs are expressed as quantum circuits working on single qubits.\n\nBased on classic compiler-theory and quantum information, this course will cover the components needed to develop a quantum compiler, which can translate a high-level programming language into feasible quantum circuits and mapping these circuits onto the qubits of the target quantum computer architecture.",
    "Learning objectives": "A student who has met the objectives of the course will be able to:\nexplain the structure of optimizing compilers and the functionality of the different phases\nexplain the relation between high-level language, intermediate representation, analyses, and optimizations\nexplain the process of code generation for quantum computers and the difference of doing so for different quantum computers in the NISQ era\nimplement key optimization phases\nexplain and derive analytic models for performance\nevaluate the performance of quantum computers\nexplain the relationship between high-performance computers and quantum computers\nidentify performance bottlenecks in quantum computer systems",
    "Content": "Compiler theory: The compilation process; Intermediate representations;\n\nOptimization of quantum circuits: Circuit compression; Decompose; Optimal routing; Error mitigation\n\nTargeting quantum computers in the NISQ era\n\nIntegration of QC with classical computing",
    "Last updated": "02. maj, 2024"
}