{
    "course title": "46120 Scientific Programming for Wind Energy",
    "Danish title": "Videnskabelig Programmering for Vindenergi",
    "Language of instruction": "English",
    "Point( ECTS )": "5",
    "Course type": "MSc\nProgramme-specific course (MSc), Sustainable Energy Systems\nProgramme-specific course (MSc), Sustainable Energy Technologies",
    "Schedule": "Spring F2B (Thurs 8-12)",
    "Location": "Campus Lyngby\nThe course is taught hybrid. Students may attend at Lyngby campus, Risø campus, or online.",
    "Scope and form": "Lectures and group work on assignments (3-4 students per group)",
    "Duration of Course": "13 weeks",
    "Date of examination": "F2B",
    "Type of assessment": "Written examination and reports\nThe individual final grade is determined as a cumulative evaluation of the person’s contributions to the final programming project, handed in via a GitLab repository, and an individual written quiz.",
    "Exam duration": "Written exam: 1 hour",
    "Aid": "No Aid",
    "Evaluation": "pass / not pass , internal examiner",
    "Not applicable together with": "02160/02161/02162",
    "Responsible": "Jenni Rinker , Lyngby Campus, Building 403 , rink@dtu.dk",
    "Course co-responsible": "Ju Feng , Lyngby Campus, Building 403 , jufen@dtu.dk",
    "Department": "46 Department of Wind and Energy Systems",
    "Registration Sign up": "At the Studyplanner\n\nPriority is given to students from the Wind Energy and Sustainable Energy MSc programs.",
    "Green challenge participation": "This course gives the student an opportunity to prepare a project that may participate in DTU's Study Conference on sustainability, climate technology, and the environment (GRØN DYST). More information http://www.groendyst.dtu.dk/english",
    "General course objectives": "General course objectives\nWriting code to solve complex scientific and engineering problems has become an essential skill for scientists and engineers. This course helps students to develop this skill through: learning core principles and best practices for programming; practicing usage of fundamental software development tools and techniques such as version control, packaging and architecture design; leveraging scientific computation tools commonly used in scientific Python, like numpy, matplotlib and scipy; developing, evaluating and communicating Python libraries for wind-energy applications through hands-on group projects, peer code reviews and code presentations. Through this course, a student’s material, cognitive, and social computational literacy will be largely improved, together with the ability to formulate computational problems in wind energy and solve them with programming.",
    "Learning objectives": "A student who has met the objectives of the course will be able to:\nUtilize Python packages common to wind energy, such as numpy, matplotlib, scipy, PyWake, TOPFARM, xarray, pandas, etc.\nManipulate data stored in the most common wind-energy formats, demonstrating skills such as loading from/saving to file, performing computations, and visualizing results.\nDesign and publish a Python package for a wind-energy application with tests and documentation.\nCollaborate with a team on a code base hosted on GitLab, demonstrating basic git skills such as adding, committing, pushing, and branching.\nDevelop, debug, and lint code using VS Code and related extensions.\nCommunicate code orally and also in writing, via diagrams, comments, commit messages, and documentation.\nCritically analyze code for good coding practices such as modularity, maintainability, adherence to stylistic conventions, etc.\nWrite tests for scientific code.\nExecute code on a computing cluster.",
    "Content": "The content of this course is tailored to students who have average to no previous experience in programming and want to take other courses at DTU Wind. The course uses the Python programming language. During the course, students work in small groups on in-class exercises, weekly assignments, and two projects. Students must pass the first project to submit the second project. The final grade is evaluated based on the second project. Consistent practice in communication about scientific code is ensured by weekly group-to-group presentations of their solutions to the week’s assignment.\n\nIn the first part of the course, students learn how to collaborate in groups on code using the version-control software git/GitLab, which is used throughout the semester. After that, students use the foundational packages for scientific Python programming (numpy, matplotlib, scipy) to practice basic skills such as numeric array manipulation, loading/saving/visualizing data, and writing/importing functions. These skills are cemented in the first project, in which groups calculate the time-marching response of a simple wind turbine model to different turbulent wind conditions and visualize the resulting statistics.\n\nAfter the first project is handed in, more advanced topics are presented. This includes more abstract concepts from general programming—such as object-oriented practices, designing package architectures, and linting—as well as more wind-specific topics—e.g., packages and data formats that are commonly used in wind energy. The course ends with the final project, in which students work individually or in groups to publish a Python package for wind energy, complete with tests and documentation. A list of pre-defined final projects is provided, but students may submit a request for a different project if they have an idea they would like to pursue.",
    "Last updated": "02. maj, 2024"
}