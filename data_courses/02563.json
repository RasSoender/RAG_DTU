{
    "course title": "02563 Generative Methods for Computer Graphics",
    "Danish title": "Generative metoder til computergrafik",
    "Language of instruction": "English",
    "Point( ECTS )": "5",
    "Course type": "MSc\nProgramme specific course (MSc), Human-Centered Artificial Intelligence\nProgramme specific course (MSc), Mathematical Modelling and Computation\nTechnological specialization course (MSc), Human-Centered Artificial Intelligence\nTechnological specialization course (MSc), Mathematical Modelling and Computation",
    "Schedule": "Spring F1B (Thurs 13-17)",
    "Location": "Campus Lyngby",
    "Scope and form": "Lectures and exercises",
    "Duration of Course": "13 weeks",
    "Date of examination": "F1B",
    "Type of assessment": "Evaluation of exercises/reports\nThe assessment is based on a final project report accompanied by a brief presentation video. Up to four students can collaborate on a project, and only one video is submitted per project, but the reports are individual. Students can only participate in the exam if a number of exercise reports have been approved. Exercises are carried out in groups.",
    "Evaluation": "7 step scale , internal examiner",
    "Previous Course": "02564",
    "Not applicable together with": "02564",
    "Academic prerequisites": "02561 , Qualifications that correspond to at least one course in computer graphics and programming experience.",
    "Participants restrictions": "Minimum 10",
    "Responsible": "J. Andreas Bærentzen , Ph. (+45) 4525 3414 , janba@dtu.dk",
    "Department": "01 Department of Applied Mathematics and Computer Science",
    "Registration Sign up": "At the Studyplanner",
    "Green challenge participation": "Please contact the teacher for information on whether this course gives the student the opportunity to prepare a project that may participate in DTU´s Study Conference on sustainability, climate technology, and the environment (GRØN DYST). More infor http://www.groendyst.dtu.dk/english",
    "General course objectives": "General course objectives\nThis course is about methods for synthesizing digital, visual content in the form of images, 3D models, particle systems, and dynamic phenomena. Many of these methods are inspired by physical or biological phenomena; some are purely algorithmic and some are data-driven. The course covers the underlying models, mathematical underpinnings, and the practical implementations.",
    "Learning objectives": "A student who has met the objectives of the course will be able to:\ncreate point sample sets.\nuse particles to simulate ensembles of simple entities.\nsynthesise images and textures using e.g. learning-based methods.\ngenerate fractal images and 3D models.\nsynthesize 3D objects using grammar-based methods such as L-systems.\nuse synthetic noise functions in generative methods.\ncreate implicitly represented 3D objects using e.g. distance fields.\napply bio-inspired methods such as differential growth for form finding.\nexplain and discuss underlying principles of generative methods.",
    "Content": "- Generation of point samples, using e.g. jittering and Poisson disc sampling.\n- Particle systems for simulation of fluids, granular material, and swarms.\n- Pixel and patch based image (texture) synthesis using source patch sampling, wave function collapse, and learning based methods.\n- Fractals and the generation of self-similar structures in images and 3D shapes.\n- Grammar based methods and L-systems for digital botany and other types of 3D content.\n- Noise generation in nD and specific types of noise such as Perlin noise, Worley noise, curl noise, and phasor noise.\n- Synthesis of 3D shapes using implicit representations such as signed distance fields and deep learning of 3D shapes in terms of implicit representations.\n- Biologically informed methods: Turing patterns, cellular automata, differential growth, and evolutionary methods for form finding.",
    "Remarks": "The course literature consists of academic papers and course notes. The exercises will mostly consist of programming in Python, using Blender for content creation and rendering, and shader programming using GLSL.",
    "Last updated": "02. maj, 2024"
}